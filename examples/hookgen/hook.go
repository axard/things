// Code generated by hookgen; DO NOT EDIT.
// github.com/axard/things/cmd/hookgen

package main

import (
	"sync"
)

type Hook struct {
	list []*hooked
	m    sync.Mutex
}

type hooked struct {
	Action
}

type Cancel = func()

func (this *Hook) Append(item Action) Cancel {
	this.m.Lock()
	defer this.m.Unlock()

	hooked := &hooked{item}
	this.list = append(this.list, hooked)

	return func() { this.remove(hooked) }
}

func (this *Hook) remove(hooked *hooked) {
	this.m.Lock()
	defer this.m.Unlock()

	for i := range this.list {
		if this.list[i] == hooked {
			this.list = append(this.list[:i], this.list[i+1:]...)
			break
		}
	}
}

func (this *Hook) Do() {
	this.m.Lock()
	defer this.m.Unlock()

	for _, hooked := range this.list {
		hooked.Do()
	}
}
